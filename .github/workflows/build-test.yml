name: CI + Build Docker + Déploiement

on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    name: 🛠️ Build / Compilation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Cache node_modules + Cypress cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Installer les dépendances
        run: npm install

      - name: Compiler l’application Next.js
        run: npm run build

  test:
    name: ✅ Tests Cypress
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        browser: ["chrome", "edge"]
    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Restaurer cache node_modules + Cypress cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Installer avec ci (pour être certain d’avoir un build identique au CI)
        run: npm ci

      - name: Lancer le serveur Next en tâche de fond
        run: npm run dev &

      - name: Attendre 5 secondes que Next.js soit up
        run: sleep 5

      - name: Lancer Cypress
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}

      - name: Upload des vidéos Cypress
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos-${{ matrix.browser }}
          path: cypress/videos
          retention-days: 5

      - name: Upload des screenshots Cypress (si échec)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots-${{ matrix.browser }}
          path: cypress/screenshots
          retention-days: 5

  build-docker:
    name: 📦 Build & Push Docker
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Se logguer sur GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_KEY }}

      - name: Construire l’image Docker
        run: |
          docker build -t ghcr.io/cocostee/shiny-memory/nodejs-my-website:latest .

      - name: Pousser l’image sur GHCR
        run: |
          docker push ghcr.io/cocostee/shiny-memory/nodejs-my-website:latest

  deploy-prod:
    name: 🚀 Déploiement Prod (branche main)
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Préparer la clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Déployer en Prod sur le serveur
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e

          if [ ! -d "/home/${{ secrets.SSH_USER }}/prod/.git" ]; then
            echo "Le dossier ~/prod n'est pas un dépôt Git valide. Suppression et re-clonage."
            rm -rf /home/${{ secrets.SSH_USER }}/prod
            git clone --branch main https://github.com/Cocostee/shiny-memory.git /home/${{ secrets.SSH_USER }}/prod
          fi

          cd /home/${{ secrets.SSH_USER }}/prod

          git fetch origin
          git checkout main
          git reset --hard origin/main

          echo '${{ secrets.DOCKER_KEY }}' | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

          if ! docker network ls --format '{{.Name}}' | grep -qw traefik; then
            echo "➡️ Le network 'traefik' n'existe pas, création..."
            docker network create traefik
          else
            echo "✅ Le network 'traefik' existe déjà"
          fi

          if [ -z "$(docker ps --filter "name=traefik" --filter "status=running" -q)" ]; then
            echo "➡️ Traefik n'est pas actif, lancement..."
            docker compose -f /home/${{ secrets.SSH_USER }}/prod/traefik/docker-compose.yml up -d
          else
            echo "✅ Traefik tourne déjà, on ne fait rien"
          fi

          docker compose -f prod/docker-compose.yml pull
          docker compose -f prod/docker-compose.yml up -d
          EOF

  deploy-test:
    name: 🚧 Déploiement Test (branche develop)
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Préparer la clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Déployer en Test sur le serveur
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e

          if [ ! -d "/home/${{ secrets.SSH_USER }}/test/.git" ]; then
            echo "Le dossier ~/test est absent ou invalide. Suppression et clonage propre."
            rm -rf /home/${{ secrets.SSH_USER }}/test
            git clone --branch develop https://github.com/Cocostee/shiny-memory.git /home/${{ secrets.SSH_USER }}/test
          fi

          cd /home/${{ secrets.SSH_USER }}/test

          git fetch origin
          git checkout develop
          git reset --hard origin/develop

          echo '${{ secrets.DOCKER_KEY }}' | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

          if ! docker network ls --format '{{.Name}}' | grep -qw traefik; then
            echo "➡️ Le network 'traefik' n'existe pas, création..."
            docker network create traefik
          else
            echo "✅ Le network 'traefik' existe déjà"
          fi

          if [ -z "$(docker ps --filter "name=traefik" --filter "status=running" -q)" ]; then
            echo "➡️ Traefik n'est pas actif, lancement..."
            docker compose -f /home/${{ secrets.SSH_USER }}/test/traefik/docker-compose.yml up -d
          else
            echo "✅ Traefik tourne déjà, on ne fait rien"
          fi

          # 5) Pull de la dernière image + relance des containers en test
          docker compose -f test/docker-compose.yml pull
          docker compose -f test/docker-compose.yml up -d
          EOF
